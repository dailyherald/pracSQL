help(lm)
#---------------------------------------
# disconnect and unload driver when done
dbDisconnect(con)
dbUnloadDriver(drv)
library("RPostgreSQL")
#---------------------------------------
# disconnect and unload driver when done
dbDisconnect(con)
dbUnloadDriver(drv)
setwd("~/anaconda3/envs/notebook/analysis/ignore/children_hospitals")
library(tidyverse)
df <- read.csv("data.csv", header=T, na.strings=c("-","NA"))
summary(df)
# save summary stats in a dataframe so we can refer to them later
dfsum <- data.frame(unclass(summary(df)), check.names = FALSE, stringsAsFactors = FALSE)
write_csv(dfsum,'data_summary.csv')
View(dfsum)
qplot(totalNPR,
data=df,
fill=factor(fy),
bins = 12
)
View(df)
qplot(totalNPR,
data=df,
fill=factor(fy),
bins = 30
)
qplot(margin,
data=df,
fill=factor(fy),
bins = 30
)
qplot(net_income,
data=df,
fill=factor(fy),
bins = 30
)
qplot(compensation_perc,
data=df,
fill=factor(fy),
bins = 30
)
setwd("~/anaconda3/envs/notebook/analysis/ignore/children_hospitals")
library(tidyverse)
options("scipen" = 10)
df <- read.csv("data.csv", header=T, na.strings=c("-","NA"))
summary(df)
# save summary stats in a dataframe so we can refer to them later
dfsum <- data.frame(unclass(summary(df)), check.names = FALSE, stringsAsFactors = FALSE)
write_csv(dfsum,'data_summary.csv')
qplot(totalNPR,
data=df,
fill=factor(fy),
bins = 30
)
qplot(margin,
data=df,
fill=factor(fy),
bins = 30
)
qplot(net_income,
data=df,
fill=factor(fy),
bins = 30
)
qplot(compensation_perc,
data=df,
fill=factor(fy),
bins = 30
)
years <- table(df$fy)
years
df5 <- filter(df$fy != c("2011","2018"))
years5 <- table(df$fy)
years5
years5 <- table(df5$fy)
df5 <- filter(df$fy %in% c("2012","2013","2014","2015","2016","2017"))
years5 <- table(df5$fy)
df5 <- filter(!df$fy %in% c("2011","2018"))
df5 <- filter(!df, fy %in% c("2011","2018"))
df5 <- filter(!df, fy %in% c(2011,2018))
df5 <- filter(df, !fy %in% c(2011,2018))
years5 <- table(df5$fy)
years5
qplot(totalNPR,
data=df5,
fill=factor(fy),
bins = 30
)
qplot(margin,
data=df5,
fill=factor(fy),
bins = 30
)
qplot(net_income,
data=df5,
fill=factor(fy),
bins = 30
)
qplot(compensation_perc,
data=df5,
fill=factor(fy),
bins = 30
)
View(df5)
# in R
sqrt(9)
setwd("~/anaconda3/envs/pracSQL/Chapter_05_math")
library("RPostgreSQL")
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")#, password = pw)
sql <- "
SELECT c2010.geo_name,
c2010.state_us_abbreviation AS state,
c2010.p0010001 AS pop_2010,
c2000.p0010001 AS pop_2000,
c2010.p0010001 - c2000.p0010001 AS raw_change,
round( (CAST(c2010.p0010001 AS numeric(8,1)) - c2000.p0010001)
/ c2000.p0010001 * 100, 1 ) AS pct_change
FROM us_counties_2010 c2010 INNER JOIN us_counties_2000 c2000
ON c2010.state_fips = c2000.state_fips
AND c2010.county_fips = c2000.county_fips
AND c2010.p0010001 <> c2000.p0010001
ORDER BY pct_change DESC;
"
df <- dbGetQuery(con, sql)
head(df)
# here's how we'd do that in R
sql <- "
SELECT c2010.geo_name,
c2010.state_us_abbreviation AS state,
c2010.p0010001 AS pop_2010,
c2000.p0010001 AS pop_2000
FROM us_counties_2010 c2010 INNER JOIN us_counties_2000 c2000
ON c2010.state_fips = c2000.state_fips
AND c2010.county_fips = c2000.county_fips
AND c2010.p0010001 <> c2000.p0010001
"
df <- dbGetQuery(con, sql)
head(df)
df['raw_change'] <- df['pop_2010'] - df['pop_2000']
head(df)
df['pct_change'] <- ( (df['pop_2010'] - df['pop_2000'])/df['pop_2000'] )* 100 %>% arrange(df,desc(pct_change))
df['pct_change'] <- ( (df['pop_2010'] - df['pop_2000'])/df['pop_2000'] )* 100# %>% arrange(df,desc(pct_change))
head(df)
df['pct_change'] <- ( (df['pop_2010'] - df['pop_2000'])/df['pop_2000'] )* 100 %>% arrange(desc(pct_change))
df['pct_change'].arrange(desc(pct_change)) <- ( (df['pop_2010'] - df['pop_2000'])/df['pop_2000'] )* 100
df <- data.frame(list(A=c(1, 101, 201, 301, 401, 501),
B=rep(1, 6),
C=c(0.45, 0.38, 0.38, 0.28, 0.98, 0.68)))
df$order <- order(df$C, df$A, df$B)
df
df <- data.frame(list(A=c(1, 101, 201, 301, 401, 501),
B=rep(1, 6),
C=c(0.45, 0.38, 0.38, 0.28, 0.98, 0.68)))
df
df$order <- order(df$C, df$A, df$B)
df
# here's how we'd do that in R
sql <- "
SELECT c2010.geo_name,
c2010.state_us_abbreviation AS state,
c2010.p0010001 AS pop_2010,
c2000.p0010001 AS pop_2000
FROM us_counties_2010 c2010 INNER JOIN us_counties_2000 c2000
ON c2010.state_fips = c2000.state_fips
AND c2010.county_fips = c2000.county_fips
AND c2010.p0010001 <> c2000.p0010001
"
df <- dbGetQuery(con, sql)
df['raw_change'] <- df['pop_2010'] - df['pop_2000']
df$pct_change <-  ( (df['pop_2010'] - df['pop_2000'])/df['pop_2000'] )* 100
head(df)
df <- dbGetQuery(con, sql)
df$raw_change <- df$pop_2010 - df$pop_2000
df$pct_change <-  ( (df$pop_2010 - df$pop_2000)/df$pop_2000 )* 100
head(df)
# here's how we'd do that in R
sql <- "
SELECT c2010.geo_name,
c2010.state_us_abbreviation AS state,
c2010.p0010001 AS pop_2010,
c2000.p0010001 AS pop_2000
FROM us_counties_2010 c2010 INNER JOIN us_counties_2000 c2000
ON c2010.state_fips = c2000.state_fips
AND c2010.county_fips = c2000.county_fips
AND c2010.p0010001 <> c2000.p0010001
"
df <- dbGetQuery(con, sql)
df$raw_change <- df$pop_2010 - df$pop_2000
df$pct_change <-  round( ( (df$pop_2010 - df$pop_2000)/df$pop_2000 )* 100,1)
head(df)
# here's how we'd do that in R
sql <- "
SELECT c2010.geo_name,
c2010.state_us_abbreviation AS state,
c2010.p0010001 AS pop_2010,
c2000.p0010001 AS pop_2000
FROM us_counties_2010 c2010 INNER JOIN us_counties_2000 c2000
ON c2010.state_fips = c2000.state_fips
AND c2010.county_fips = c2000.county_fips
AND c2010.p0010001 <> c2000.p0010001
"
df <- dbGetQuery(con, sql)
df$raw_change <- df$pop_2010 - df$pop_2000
df$pct_change <-  round( ( (df$pop_2010 - df$pop_2000)/df$pop_2000 )* 100,1)
df <- arrange(df, desc(pct_change))
head(df)
library(tidyverse)
sql <- "
SELECT c2010.geo_name,
c2010.state_us_abbreviation AS state,
c2010.p0010001 AS pop_2010,
c2000.p0010001 AS pop_2000
FROM us_counties_2010 c2010 INNER JOIN us_counties_2000 c2000
ON c2010.state_fips = c2000.state_fips
AND c2010.county_fips = c2000.county_fips
AND c2010.p0010001 <> c2000.p0010001
"
df <- dbGetQuery(con, sql)
df$raw_change <- df$pop_2010 - df$pop_2000
df$pct_change <-  round( ( (df$pop_2010 - df$pop_2000)/df$pop_2000 )* 100,1)
df <- arrange(df, desc(pct_change))
head(df)
sql <- "SELECT sum(p0010001) AS 'County Sum',
round(avg(p0010001), 0) AS 'County Average'
FROM us_counties_2010;"
dbGetQuery(con, sql)
sql <- 'SELECT sum(p0010001) AS "County Sum",
round(avg(p0010001), 0) AS "County Average"
FROM us_counties_2010;'
dbGetQuery(con, sql)
df <- dbGetQuery(con, sql)
head(df)
# in R
sql <-'SELECT p0010001 as "County" FROM us_counties_2010;'
df <- dbGetQuery(con, sql)
head(df)
dfcalc$County_Sum <- sum(df)
dfcalc
dfcalc <- data_frame()
dfcalc$County_Sum <- sum(df)
dfcalc
dfcalc <- data_frame(
County_Sum,
County_Average
)
dfcalc$County_Sum <- sum(df)
View(dfcalc)
# create an empty dataframe
dfcalc <- data_frame(
County_Sum=double(),
County_Average=double()
)
dfcalc$County_Sum <- sum(df)
dfcalc$County_Average <- average(df)
dfcalc
View(dfcalc)
dfcalc$County_Sum <- 100
dfcalc$County_Average <- 200
dfcalc$County_Sum <- 100.1
dfcalc$County_Sum <- rbind(dfcalc, 100)
dfcalc
empty <- data.frame(a = numeric(), b = factor(), c = character())
filled <- rbind(empty, data.frame(a = 1, b = factor("abc"), c = "def"))
filled
# create an empty dataframe
empty <- data_frame(
County_Sum=double(),
County_Average=double()
)
dfcalc <- rbind(empty, data.frame(County_Sum = sum(df), County_Average = average(df) ) )
dfcalc <- rbind(empty, data.frame(County_Sum = sum(df), County_Average = mean(df) ) )
head(df)
dfcalc <- rbind(empty, data.frame(County_Sum = sum(df$County), County_Average = mean(df$County) ) )
dfcalc
# create an empty dataframe
empty <- data_frame(
County_Sum=double(),
County_Average=double(),
County_Median=double(),
County_Mode=double()
)
dfcalc <- rbind(empty,
data.frame(County_Sum = sum(df$County),
County_Average = mean(df$County),
County_Median = median(df$County),
County_mode = mode(df$County)
) )
dfcalc
# create an empty dataframe
empty <- data_frame(
County_Sum=double(),
County_Average=double(),
County_Median=double(),
County_Mode=double()
)
# if we want to find the mode, we need to create a function
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
dfcalc <- rbind(empty,
data.frame(County_Sum = sum(df$County),
County_Average = mean(df$County),
County_Median = median(df$County),
County_mode = getmode(df$County)
) )
dfcalc
summary(df)
setwd("~/anaconda3/envs/pracSQL/Chapter_05_math")
library("RPostgreSQL")
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")#, password = pw)
# 1 x 2 x 3 x 4 = 24
factorial(5)
# factorial
sql <- "SELECT 5 !;"
dbGetQuery(con, sql)
