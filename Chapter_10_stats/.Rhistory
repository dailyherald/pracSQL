# set directory
setwd("~/anaconda3/envs/pracSQL/Chapter_10_stats")
# load libraries
library(tidyverse)
library("RPostgreSQL")
options("scipen" = 10)
# connect to postgres (remembert to turn it on)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")
# execute a query
sql <- "CREATE TABLE acs_2011_2015_stats (
geoid varchar(14) CONSTRAINT geoid_key PRIMARY KEY,
county varchar(50) NOT NULL,
st varchar(20) NOT NULL,
pct_travel_60_min numeric(5,3) NOT NULL,
pct_bachelors_higher numeric(5,3) NOT NULL,
pct_masters_higher numeric(5,3) NOT NULL,
median_hh_income integer,
CHECK (pct_masters_higher <= pct_bachelors_higher)
);"
dbGetQuery(con, sql)
sql <- "Select * from acs_2011_2015_stats;"
dbGetQuery(con, sql)
sql <- "COPY acs_2011_2015_stats
FROM '/Users/tbroderick/anaconda3/envs/pracSQL/Chapter_10_stats/acs_2011_2015_stats.csv'
WITH (FORMAT CSV, HEADER, DELIMITER ',');"
dbGetQuery(con, sql)
sql <- "SELECT count(*) FROM acs_2011_2015_stats"
dbGetQuery(con, sql)
# get the R value for the correlation between education and income
sql <- "SELECT corr(median_hh_income, pct_bachelors_higher)
AS bachelors_income_r
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
sql <- "SELECT * FROM acs_2011_2015_stats"
df <- dbGetQuery(con, sql)
View(df)
qplot(pct_bachelors_higher,median_hh_income,
data=df) +
stat_smooth(method="lm")
?lm
# Here's how we can see all the results
income <- lm(pct_bachelors_higher ~ median_hh_income, data = df)
summary(income)
# Here's how we can see all the results
income <- lm(median_hh_income ~ pct_bachelors_higher, data = df)
summary(income)
# get the R value for the correlation between education and income
sql <- "SELECT corr(median_hh_income, pct_bachelors_higher)
AS bachelors_income_r
FROM acs_2011_2015_stats;"
val <- dbGetQuery(con, sql)
val
# Here's how we can see all the results
income <- lm(median_hh_income ~ pct_bachelors_higher, data = df)
summary(income)
options("scipen" = 20)
# Here's how we can see all the results
income <- lm(median_hh_income ~ pct_bachelors_higher, data = df)
summary(income)
# that is a different number than the R sqaured
sql <- "SELECT regr_r2(median_hh_income, pct_bachelors_higher)
AS bachelors_income_r
FROM acs_2011_2015_stats;"
val2 <- dbGetQuery(con, sql)
val2
# let's check additional correlations, both R and R squared
sql <- "SELECT
round( corr(median_hh_income, pct_bachelors_higher)::numeric, 2) AS bachelors_income_r,
round(corr(pct_travel_60_min, median_hh_income)::numeric, 2) AS income_travel_r,
round(corr(pct_travel_60_min, pct_bachelors_higher)::numeric, 2) AS bachelors_travel_r
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
sql <- "SELECT
round( regr_r2(median_hh_income, pct_bachelors_higher)::numeric, 2) AS bachelors_income_r,
round( regr_r2(pct_travel_60_min, median_hh_income)::numeric, 2) AS income_travel_r,
round( regr_r2(pct_travel_60_min, pct_bachelors_higher)::numeric, 2) AS bachelors_travel_r
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
?square
?sqrt
sqrt(val)
sqr(val)
val * val
val2
val2
val * val
val.bachelors_income_r
val(bachelors_income_r)
val[bachelors_income_r]
View(val)
val(1)
val[0]
val
val[1]
val
summary(income)
val # R
# let's check additional correlations, both R and R squared
sql <- "SELECT
round( corr(median_hh_income, pct_bachelors_higher)::numeric, 2) AS bachelors_income_r,
round(corr(pct_travel_60_min, median_hh_income)::numeric, 2) AS income_travel_r,
round(corr(pct_travel_60_min, pct_bachelors_higher)::numeric, 2) AS bachelors_travel_r
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
sql <- "SELECT
round( regr_r2(median_hh_income, pct_bachelors_higher)::numeric, 2) AS bachelors_income_r,
round( regr_r2(pct_travel_60_min, median_hh_income)::numeric, 2) AS income_travel_r,
round( regr_r2(pct_travel_60_min, pct_bachelors_higher)::numeric, 2) AS bachelors_travel_r
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
summary(income)$r.squared
summary(income)$r
.squared
summary(income)$r.squared
coeffs = coefficients(income); coeffs
# Here's how we can see all the results
income <- lm(median_hh_income ~ pct_bachelors_higher, data = df)
summary(income)
summary(income)$r.squared
coeffs = coefficients(income)
coeffs
# Here's how we can see all the results
cor(median_hh_income,pct_bachelors_higher)
# Here's how we can see all the results
cor(df$median_hh_income,df$pct_bachelors_higher)
# Here's how we can see all the results
y <- df$median_hh_income
x <- df$pct_bachelors_higher
cor(y,x)
?cor
income <- lm(median_hh_income ~ pct_bachelors_higher, data = df)
summary(income)
summary(income)$r.squared
coefficients(income)
cor(y,x)
cor(x, df$median_hh_income)
corr(x, y)
cor.test(x, y)
# Here's how we can see everything in R
y <-
x <-
cor.test(df$pct_bachelors_higher,df$median_hh_income)
cor.test(df$pct_bachelors_higher,df$median_hh_income)
# get the R value for the correlation between education and income
sql <- "SELECT corr(median_hh_income, pct_bachelors_higher)
AS bachelors_income_r
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
# disconnect
dbDisconnect(con)
dbUnloadDriver(drv)
# set directory
setwd("~/anaconda3/envs/pracSQL/Chapter_10_stats")
# load libraries
library(tidyverse)
library("RPostgreSQL")
options("scipen" = 20)
# connect to postgres (remembert to turn it on)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")
s
s
sql <- "SELECT count(*) FROM acs_2011_2015_stats"
dbGetQuery(con, sql)
# get the R value for the correlation between education and income
sql <- "SELECT corr(median_hh_income, pct_bachelors_higher)
AS bachelors_income_r
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
# that is a different number than the R squared because it's just the R value
# r squared is this: https://www.postgresql.org/docs/9.1/functions-aggregate.html
sql <- "SELECT regr_r2(median_hh_income, pct_bachelors_higher)
AS bachelors_income_r
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
sql <- "SELECT * FROM acs_2011_2015_stats"
df <- dbGetQuery(con, sql)
qplot(pct_bachelors_higher,median_hh_income,
data=df) +
stat_smooth(method="lm")
# Here's how we can see everything in R
cor.test(df$pct_bachelors_higher,df$median_hh_income)
income <- lm(median_hh_income ~ pct_bachelors_higher, data = df)
summary(income)
summary(income)$r.squared
coefficients(income)
# let's check additional correlations, both R and R squared
sql <- "SELECT
round( corr(median_hh_income, pct_bachelors_higher)::numeric, 2) AS bachelors_income_r,
round(corr(pct_travel_60_min, median_hh_income)::numeric, 2) AS income_travel_r,
round(corr(pct_travel_60_min, pct_bachelors_higher)::numeric, 2) AS bachelors_travel_r
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
sql <- "SELECT
round( regr_r2(median_hh_income, pct_bachelors_higher)::numeric, 2) AS bachelors_income_r,
round( regr_r2(pct_travel_60_min, median_hh_income)::numeric, 2) AS income_travel_r,
round( regr_r2(pct_travel_60_min, pct_bachelors_higher)::numeric, 2) AS bachelors_travel_r
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
# get the intercept and y slope
sql <- "SELECT
round( regr_slope(median_hh_income, pct_bachelors_higher )::numeric, 2 ) AS slope,
round( regr_intercept(median_hh_income, pct_bachelors_higher)::numeric, 2 ) AS y_intercept
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
coefficients(income)
# in R
coefficients(income)
# Here's how we can see everything in R
income <- lm(median_hh_income ~ pct_bachelors_higher, data = df)
summary(income)
# and here's how we get the R value with R
cor.test(df$pct_bachelors_higher,df$median_hh_income)
# in R
coefficients(income)
# so the value of y when x = 0 is 27901.1487
# it increases by 926.9503 for every point along X
# which means that at 100% bachelors degrees,
# Y would be
yvalue <- (926.9503 * 100) + 27901.1487
yvalue
# y value at 50%
yvalue50 <- (926.9503 * 50) + 27901.1487
yvalue50
# Always good to also check distribution of the data as well
qplot(median_hh_income,
data=df,
bins = 100
)
qplot(pct_bachelors_higher,
data=df,
bins = 100
)
median(df$median_hh_income)
?median
median(df$median_hh_income, na.rm = TRUE)
median(df$pct_bachelors_higher, na.rm = TRUE)
# disconnect
dbDisconnect(con)
dbUnloadDriver(drv)
# set directory
setwd("~/anaconda3/envs/pracSQL/Chapter_10_stats")
# load libraries
library(tidyverse)
library("RPostgreSQL")
options("scipen" = 20)
# connect to postgres (remembert to turn it on)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")
sql <- "SELECT * FROM acs_2011_2015_stats"
df <- dbGetQuery(con, sql)
# Here's how we can see everything in R
income <- lm(median_hh_income ~ pct_bachelors_higher, data = df)
summary(income)
# in R
coefficients(income)
# so the value of y when x = 0 is 27901.1487
# it increases by 926.9503 for every point along X
# which means that at 100% bachelors degrees,
# Y would be
yvalue <- (926.9503 * 100) + 27901.1487
yvalue
# y value at 50%
yvalue50 <- (926.9503 * 50) + 27901.1487
yvalue50
# Always good to also check distribution of the data as well
qplot(median_hh_income,
data=df,
bins = 100
)
median(df$median_hh_income, na.rm = TRUE)
median(df$median_hh_income, na.rm = TRUE)
qplot(pct_bachelors_higher,
data=df,
bins = 100
)
median(df$pct_bachelors_higher, na.rm = TRUE)
summary(income)
# These values allow us to plot a predictive regression line
# How about variance
sql <- "SELECT var_pop(median_hh_income)
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
var(df$median_hh_income)
var(df$median_hh_income, na.rm = TRUE)
var(df$median_hh_income, na.rm = TRUE) * ( nrow(df$median_hh_income) - 1) / nrow(df$median_hh_income)
n <- nrow(df$median_hh_income)
var(df$median_hh_income, na.rm = TRUE) * ( n - 1) / n
n-1
n <- nrow(df$median_hh_income)
n
nrow(df$median_hh_income)
nrow(df$median_hh_income, na.rm = TRUE)
?nrow
nrow(df)
n <- nrow(df)
var(df$median_hh_income, na.rm = TRUE) * ( n - 1) / n
dbGetQuery(con, sql)
# standard deviation
sql <- "SELECT stddev_pop(median_hh_income)
FROM acs_2011_2015_stats;
"
dbGetQuery(con, sql)
# in R
sd(df$median_hh_income)
# in R
sd(df$median_hh_income, na.rm = TRUE)
# in R
sd(df$median_hh_income, na.rm = TRUE) * ( n - 1) / n
# in R
sd(df$median_hh_income, na.rm = TRUE)
# population variance
sql <- "SELECT var_pop(median_hh_income)
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
# Variance in R
n <- nrow(df)
var(df$median_hh_income, na.rm = TRUE) * ( n - 1) / n
var(df$median_hh_income, na.rm = TRUE) * ( n - 2) / n
var(df$median_hh_income, na.rm = TRUE) * ( n - 1) / n
# population variance
sql <- "SELECT var(median_hh_income)
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
# population variance
sql <- "SELECT var_pop(median_hh_income)
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
# Variance in R - Gets close but not quite
n <- nrow(df)
var(df$median_hh_income, na.rm = TRUE) * ( n - 1) / n
# standard deviation
sql <- "SELECT stddev_pop(median_hh_income)
FROM acs_2011_2015_stats;
"
dbGetQuery(con, sql)
# standard deviation in R
sd(df$median_hh_income, na.rm = TRUE)
# Covariance population
sql <- "SELECT covar_pop(median_hh_income, pct_bachelors_higher)
FROM acs_2011_2015_stats;"
dbGetQuery(con, sql)
# in R
cov.pop <- function(x,y=NULL) {
cov(x,y)*(NROW(x)-1)/NROW(x)
}
cov.pop(df$median_hh_income)
cov.pop(df$median_hh_income, df$pct_bachelors_higher)
cov.pop(df$median_hh_income, df$pct_bachelors_higher, na.rm = TRUE)
dfna < - filter(is.na(df))
dfna < - filter(!is.na(df))
filter(!is.na(df))
sql <- "CREATE TABLE widget_companies (
id bigserial,
company varchar(30) NOT NULL,
widget_output integer NOT NULL
);
INSERT INTO widget_companies (company, widget_output)
VALUES
('Morse Widgets', 125000),
('Springfield Widget Masters', 143000),
('Best Widgets', 196000),
('Acme Inc.', 133000),
('District Widget Inc.', 201000),
('Clarke Amalgamated', 620000),
('Stavesacre Industries', 244000),
('Bowers Widget Emporium', 201000);"
dbGetQuery(con, sql)
sql <- "SELECT count(*) FROM widget_companies"
dbGetQuery(con, sql)
sql <- "SELECT
company,
widget_output,
rank() OVER (ORDER BY widget_output DESC),
dense_rank() OVER (ORDER BY widget_output DESC)
FROM widget_companies;"
dfrank <- dbGetQuery(con, sql)
View(dfrank)
# rank within groups with partition
sql <- "CREATE TABLE store_sales (
store varchar(30),
category varchar(30) NOT NULL,
unit_sales bigint NOT NULL,
CONSTRAINT store_category_key PRIMARY KEY (store, category)
);
INSERT INTO store_sales (store, category, unit_sales)
VALUES
('Broders', 'Cereal', 1104),
('Wallace', 'Ice Cream', 1863),
('Broders', 'Ice Cream', 2517),
('Cramers', 'Ice Cream', 2112),
('Broders', 'Beer', 641),
('Cramers', 'Cereal', 1003),
('Cramers', 'Beer', 640),
('Wallace', 'Cereal', 980),
('Wallace', 'Beer', 988);"
dbGetQuery(con, sql)
sql <- "SELECT
category,
store,
unit_sales,
rank() OVER (PARTITION BY category ORDER BY unit_sales DESC)
FROM store_sales;"
dfpartition <- dbGetQuery(con, sql)
View(dfpartition)
# finally,
sql  <- "CREATE TABLE fbi_crime_data_2015 (
st varchar(20),
city varchar(50),
population integer,
violent_crime integer,
property_crime integer,
burglary integer,
larceny_theft integer,
motor_vehicle_theft integer,
CONSTRAINT st_city_key PRIMARY KEY (st, city)
);
COPY fbi_crime_data_2015
FROM '/Users/tbroderick/anaconda3/envs/pracSQL/Chapter_10_stats/fbi_crime_data_2015.csv'
WITH (FORMAT CSV, HEADER, DELIMITER ',');"
dbGetQuery(con, sql)
sql <- "SELECT * FROM fbi_crime_data_2015
ORDER BY population DESC;"
dffbi <- dbGetQuery(con, sql)
View(dffbi)
sql <- "SELECT
city,
st,
population,
property_crime,
round(
(property_crime::numeric / population) * 1000, 1
) AS pc_per_1000
FROM fbi_crime_data_2015
WHERE population >= 500000
ORDER BY (property_crime::numeric / population) DESC;"
df_crime <- dbGetQuery(con, sql)
View(df_crime)
# disconnect
dbDisconnect(con)
dbUnloadDriver(drv)
