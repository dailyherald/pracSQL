help(lm)
#---------------------------------------
# disconnect and unload driver when done
dbDisconnect(con)
dbUnloadDriver(drv)
library("RPostgreSQL")
#---------------------------------------
# disconnect and unload driver when done
dbDisconnect(con)
dbUnloadDriver(drv)
setwd("~/anaconda3/envs/notebook/analysis/ignore/children_hospitals")
library(tidyverse)
df <- read.csv("data.csv", header=T, na.strings=c("-","NA"))
summary(df)
# save summary stats in a dataframe so we can refer to them later
dfsum <- data.frame(unclass(summary(df)), check.names = FALSE, stringsAsFactors = FALSE)
write_csv(dfsum,'data_summary.csv')
View(dfsum)
qplot(totalNPR,
data=df,
fill=factor(fy),
bins = 12
)
View(df)
qplot(totalNPR,
data=df,
fill=factor(fy),
bins = 30
)
qplot(margin,
data=df,
fill=factor(fy),
bins = 30
)
qplot(net_income,
data=df,
fill=factor(fy),
bins = 30
)
qplot(compensation_perc,
data=df,
fill=factor(fy),
bins = 30
)
setwd("~/anaconda3/envs/notebook/analysis/ignore/children_hospitals")
library(tidyverse)
options("scipen" = 10)
df <- read.csv("data.csv", header=T, na.strings=c("-","NA"))
summary(df)
# save summary stats in a dataframe so we can refer to them later
dfsum <- data.frame(unclass(summary(df)), check.names = FALSE, stringsAsFactors = FALSE)
write_csv(dfsum,'data_summary.csv')
qplot(totalNPR,
data=df,
fill=factor(fy),
bins = 30
)
qplot(margin,
data=df,
fill=factor(fy),
bins = 30
)
qplot(net_income,
data=df,
fill=factor(fy),
bins = 30
)
qplot(compensation_perc,
data=df,
fill=factor(fy),
bins = 30
)
years <- table(df$fy)
years
df5 <- filter(df$fy != c("2011","2018"))
years5 <- table(df$fy)
years5
years5 <- table(df5$fy)
df5 <- filter(df$fy %in% c("2012","2013","2014","2015","2016","2017"))
years5 <- table(df5$fy)
df5 <- filter(!df$fy %in% c("2011","2018"))
df5 <- filter(!df, fy %in% c("2011","2018"))
df5 <- filter(!df, fy %in% c(2011,2018))
df5 <- filter(df, !fy %in% c(2011,2018))
years5 <- table(df5$fy)
years5
qplot(totalNPR,
data=df5,
fill=factor(fy),
bins = 30
)
qplot(margin,
data=df5,
fill=factor(fy),
bins = 30
)
qplot(net_income,
data=df5,
fill=factor(fy),
bins = 30
)
qplot(compensation_perc,
data=df5,
fill=factor(fy),
bins = 30
)
View(df5)
setwd("~/anaconda3/envs/pracSQL/Chapter_06_joining")
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")#, password = pw)
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")#, password = pw)
sql <- "CREATE TABLE schools_left (
id integer CONSTRAINT left_id_key PRIMARY KEY,
left_school varchar(30)
);"
setwd("~/anaconda3/envs/pracSQL/Chapter_06_joining")
library("RPostgreSQL")
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")#, password = pw)
sql <- "CREATE TABLE schools_left (
id integer CONSTRAINT left_id_key PRIMARY KEY,
left_school varchar(30)
);"
dbGetQuery(con, sql)
sql <- "INSERT INTO schools_left (id, left_school) VALUES
(1, 'Oak Street School'),
(2, 'Roosevelt High School'),
(5, 'Washington Middle School'),
(6, 'Jefferson High School');"
dbGetQuery(con, sql)
# right join table
sql <- "CREATE TABLE schools_right (
id integer CONSTRAINT right_id_key PRIMARY KEY,
right_school varchar(30)
);"
dbGetQuery(con, sql)
sql <- "INSERT INTO schools_right (id, right_school) VALUES
(1, 'Oak Street School'),
(2, 'Roosevelt High School'),
(3, 'Morrison Elementary'),
(4, 'Chase Magnet Academy'),
(6, 'Jefferson High School');"
dbGetQuery(con, sql)
sql <- "SELECT *
FROM schools_left JOIN schools_right
ON schools_left.id = schools_right.id;"
df <- dbGetQuery(con, sql)
head(df)
# --------------------
# left join. Returns all the items from the left table
# and only those from the right table that match
sql <- "SELECT *
FROM schools_left INNER JOIN schools_right
ON schools_left.id = schools_right.id;"
df <- dbGetQuery(con, sql)
head(df)
# --------------------
# left join. Returns all the items from the left table
# and only those from the right table that match
sql <- "SELECT *
FROM schools_left LEFT JOIN schools_right
ON schools_left.id = schools_right.id;"
df <- dbGetQuery(con, sql)
head(df)
# --------------------
# right join. opposite of left join
sql <- "SELECT *
FROM schools_left RIGHT JOIN schools_right
ON schools_left.id = schools_right.id;"
df <- dbGetQuery(con, sql)
head(df)
# --------------------
# full outer join
# returns all lines from either table, with those that can be matched
sql <- "SELECT *
FROM schools_left FUL OUTER JOIN schools_right
ON schools_left.id = schools_right.id;"
df <- dbGetQuery(con, sql)
# --------------------
# full outer join
# returns all lines from either table, with those that can be matched
sql <- "SELECT *
FROM schools_left FULL OUTER JOIN schools_right
ON schools_left.id = schools_right.id;"
df <- dbGetQuery(con, sql)
head(df)
sql <- "SELECT *
FROM schools_left CROSS JOIN schools_right
ON schools_left.id = schools_right.id;"
df <- dbGetQuery(con, sql)
sql <- "SELECT *
FROM schools_left CROSS JOIN schools_right;"
df <- dbGetQuery(con, sql)
head(df)
sql <- "SELECT *
FROM schools_left LEFT JOIN schools_right
ON schools_left.id = schools_right.id
WHERE schools_right.id IS NULL;"
df <- dbGetQuery(con, sql)
head(df)
# --------------------
# selecting specific columns
sql <- "SELECT schools_left.id,
schools_left.left_school,
schools_right.right_school
FROM schools_left LEFT JOIN schools_right
ON schools_left.id = schools_right.id;"
df <- dbGetQuery(con, sql)
head(df)
merge?
# --------------------
# inner join (defaults to inner)
# --------------------
# left join
# --------------------
# outer join
# --------------------
# Now, some custom joins
# selecting specfic rows, joining three tables
# and simplifying column names all at the same time
# --------------------
# performing math on joining rows
# what we should see is the result of an inner join, which returns only those matching criteria
# state fips, county fips and where population is not the same
# returns only certain tables
# from 2010 table: geo_name, state, pop
# from 2000 table: pop
# raw_change and pct_change are calculated
# with pct_change rounded to 1 decimal
# ---------------
# finally, disconnect
dbDisconnect(con)
?merge
# --------------------
# now, doing joins in R
library(tidyverse)
# first read in the data from CSVs
left_join <- read.csv("left_join.csv", header=T)
# first read in the data from CSVs
left_join <- read.csv("schools_left.csv", header=T)
right_join <- read.csv("schools_right.csv", header=T)
View(left_join)
# first read in the data from CSVs
schools_left <- read.csv("schools_left.csv", header=T)
schools_right <- read.csv("schools_right.csv", header=T)
View(schools_left)
head(dfinner)
# --------------------
# inner join (defaults to inner)
dfinner <- merge(x = schools_left, y = schools_right, by.x="id", by.y="id")
head(dfinner)
# --------------------
# left join uses all.x Right join would be all.y
dfleft <- merge(x = schools_left, y = schools_right, by.x="id", by.y="id", all.x=TRUE)
head(dfleft)
# --------------------
# outer join
dfout <- merge(x = schools_left, y = schools_right, by.x="id", by.y="id", all=TRUE)
View(dfout)
head(dfout)
# selecting specfic rows, joining three tables
# and simplifying column names all at the same time
sql <- "SELECT schools_left.id,
schools_left.left_school,
schools_right.right_school
FROM schools_left LEFT JOIN schools_right
ON schools_left.id = schools_right.id;"
df <- dbGetQuery(con, sql)
# ---------------
# finally, disconnect
dbDisconnect(con)
dbUnloadDriver(drv)
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")#, password = pw)
# selecting specfic rows, joining three tables
# and simplifying column names all at the same time
sql <- "SELECT schools_left.id,
schools_left.left_school,
schools_right.right_school
FROM schools_left LEFT JOIN schools_right
ON schools_left.id = schools_right.id;"
df <- dbGetQuery(con, sql)
head(df)
sql <- "
SELECT c2010.geo_name,
c2010.state_us_abbreviation AS state,
c2010.p0010001 AS pop_2010,
c2000.p0010001 AS pop_2000,
c2010.p0010001 - c2000.p0010001 AS raw_change,
round( (CAST(c2010.p0010001 AS numeric(8,1)) - c2000.p0010001)
/ c2000.p0010001 * 100, 1 ) AS pct_change
FROM us_counties_2010 c2010 INNER JOIN us_counties_2000 c2000
ON c2010.state_fips = c2000.state_fips
AND c2010.county_fips = c2000.county_fips
AND c2010.p0010001 <> c2000.p0010001
ORDER BY pct_change DESC;
"
df <- dbGetQuery(con, sql)
head(df)
# ---------------
# finally, disconnect
dbDisconnect(con)
dbUnloadDriver(drv)
