help(lm)
#---------------------------------------
# disconnect and unload driver when done
dbDisconnect(con)
dbUnloadDriver(drv)
library("RPostgreSQL")
#---------------------------------------
# disconnect and unload driver when done
dbDisconnect(con)
dbUnloadDriver(drv)
setwd("~/anaconda3/envs/notebook/analysis/ignore/children_hospitals")
library(tidyverse)
df <- read.csv("data.csv", header=T, na.strings=c("-","NA"))
summary(df)
# save summary stats in a dataframe so we can refer to them later
dfsum <- data.frame(unclass(summary(df)), check.names = FALSE, stringsAsFactors = FALSE)
write_csv(dfsum,'data_summary.csv')
View(dfsum)
qplot(totalNPR,
data=df,
fill=factor(fy),
bins = 12
)
View(df)
qplot(totalNPR,
data=df,
fill=factor(fy),
bins = 30
)
qplot(margin,
data=df,
fill=factor(fy),
bins = 30
)
qplot(net_income,
data=df,
fill=factor(fy),
bins = 30
)
qplot(compensation_perc,
data=df,
fill=factor(fy),
bins = 30
)
setwd("~/anaconda3/envs/notebook/analysis/ignore/children_hospitals")
library(tidyverse)
options("scipen" = 10)
df <- read.csv("data.csv", header=T, na.strings=c("-","NA"))
summary(df)
# save summary stats in a dataframe so we can refer to them later
dfsum <- data.frame(unclass(summary(df)), check.names = FALSE, stringsAsFactors = FALSE)
write_csv(dfsum,'data_summary.csv')
qplot(totalNPR,
data=df,
fill=factor(fy),
bins = 30
)
qplot(margin,
data=df,
fill=factor(fy),
bins = 30
)
qplot(net_income,
data=df,
fill=factor(fy),
bins = 30
)
qplot(compensation_perc,
data=df,
fill=factor(fy),
bins = 30
)
years <- table(df$fy)
years
df5 <- filter(df$fy != c("2011","2018"))
years5 <- table(df$fy)
years5
years5 <- table(df5$fy)
df5 <- filter(df$fy %in% c("2012","2013","2014","2015","2016","2017"))
years5 <- table(df5$fy)
df5 <- filter(!df$fy %in% c("2011","2018"))
df5 <- filter(!df, fy %in% c("2011","2018"))
df5 <- filter(!df, fy %in% c(2011,2018))
df5 <- filter(df, !fy %in% c(2011,2018))
years5 <- table(df5$fy)
years5
qplot(totalNPR,
data=df5,
fill=factor(fy),
bins = 30
)
qplot(margin,
data=df5,
fill=factor(fy),
bins = 30
)
qplot(net_income,
data=df5,
fill=factor(fy),
bins = 30
)
qplot(compensation_perc,
data=df5,
fill=factor(fy),
bins = 30
)
View(df5)
setwd("~/anaconda3/envs/pracSQL/Chapter_02")
setwd("~/anaconda3/envs/pracSQL/Chapter_02_slicing")
library("RPostgreSQL")
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")#, password = pw)
#test to see if connection works, and teachers table is there
dbExistsTable(con, "teachers")
# Basic syntax for running sql requests
teachers <- dbGetQuery(con, "SELECT * from teachers")
summary(teachers)
View(teachers)
df
setwd("~/anaconda3/envs/pracSQL/Chapter_02_slicing")
library("RPostgreSQL")
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")#, password = pw)
#test to see if connection works, and teachers table is there
dbExistsTable(con, "teachers")
# Basic syntax for running sql requests
teachers <- dbGetQuery(con, "SELECT * from teachers")
summary(teachers)
# select only a few columns
df <- teachers['last_name','first_name','salary']
df
library("tidyverse")
# select only a few columns
df <- select[teachers,'last_name','first_name','salary']
# select only a few columns
df <- select(teachers,'last_name','first_name','salary')
df
# distinct names of schools
df <- distinct(teachers,'last_name','first_name','salary')
df
# distinct names of schools
df <- distinct(teachers)
df
# distinct names of schools
?distinct
df <- teachers %>% distinct('schools')
df
df <- teachers %>% distinct(schools)
df <- teachers %>% distinct('school')
df
df <- teachers %>% distinct(school)
df
# district schools and salaries
df <- teachers %>% distinct( c(school,salary) )
# district schools and salaries
df <- teachers %>% distinct( c[school,salary] )
# district schools and salaries
df <- teachers %>% distinct( school,salary )
df
# ordered by
df[order(salary)] <- select(teachers,'last_name','first_name','salary')
# ordered by
df[order('salary')] <- select(teachers,'last_name','first_name','salary')
# ordered by
df[order(salary),] <- select(teachers,'last_name','first_name','salary')
df
# ordered by
df <- select(teachers,'last_name','first_name','salary')
df
# ordered by
df <- select(teachers,'last_name','first_name','salary') %>% arrange(salary)
df
# ordered by
df <- select(teachers,'last_name','first_name','salary') %>% arrange(~salary)
# ordered by
df <- select(teachers,'last_name','first_name','salary') %>% arrange(desc(salary))
df
# ordered by salary ascending
df <- select(teachers,'last_name','first_name','salary') %>% arrange(salary)
df
# multi-line
df <- select(teachers,'last_name','school','hire_date') %>% arrange(school,desc(hire_date))
df
# filter rows
df <- select(teachers,'last_name','school','hire_date') %>% filter(teachers, school == "Myers Middle School")
# filter rows
df <- select(teachers,'last_name','school','hire_date') %>% filter(teachers, school = "Myers Middle School")
# filter rows
df <- select(teachers,'last_name','school','hire_date') %>% filter(school =+ "Myers Middle School")
# filter rows
df <- select(teachers,'last_name','school','hire_date') %>% filter(school == "Myers Middle School")
df
# this is does not equal
df <- select(teachers,'school') %>% filter(school != "F.D. Roosevelt HS")
df
# hire date is before
df <- select(teachers,'last_name','school','hire_date') %>% filter(hire_date < "2000-01-01")
df
# salary  is greater than or equal to
df <- select(teachers,'last_name','first_name','salary') %>% filter(salary >= 43500)
df
# salary is between
df <- select(teachers,'last_name','first_name','salary') %>% filter( salary > 40000 & < 65000)
# salary is between
df <- select(teachers,'last_name','first_name','salary') %>% filter( salary > 40000 & salary < 65000)
df
# salary is between
df <- select(teachers,'last_name','first_name','salary') %>% filter( (salary > 40000) & (salary < 65000) )
df
# like and ILIKE
# like is case sensitive, ILIKE is not case sensitive
# and sql requests using % wildcard need to be escaped using %%
df <- select(teachers,'first_name') %>% filter( (first_name %%like%% "sam" )
#---------------------------------------
# disconnect and unload driver when done
dbDisconnect(con)
dbUnloadDriver(drv)
#---------------------------------------
# disconnect and unload driver when done
dbDisconnect(con)
dbUnloadDriver(drv)
# like and ILIKE
# like is case sensitive, ILIKE is not case sensitive
# and sql requests using % wildcard need to be escaped using %%
df <- select(teachers,'first_name') %>% filter( ( str_detect(first_name, "sam") )
# like and ILIKE
# like is case sensitive, ILIKE is not case sensitive
# and sql requests using % wildcard need to be escaped using %%
df <- select(teachers,'first_name') %>% filter( ( str_detect(first_name, "sam") ) )
# like and ILIKE
# like is case sensitive, ILIKE is not case sensitive
# and sql requests using % wildcard need to be escaped using %%
df <- select(teachers,'first_name') %>% filter( str_detect(first_name, "sam") )
df
# like and ILIKE
# like is case sensitive, ILIKE is not case sensitive
# and sql requests using % wildcard need to be escaped using %%
library(stringr)
df <- select(teachers,'first_name') %>% filter( str_detect(first_name, "sam") )
df
df <- select(teachers,'first_name') %>% filter( str_detect(first_name, "Sam") )
df
# like and ILIKE
# like is case sensitive, ILIKE is not case sensitive
# and sql requests using % wildcard need to be escaped using %%
df <- select(teachers,'first_name') %>% filter( str_detect(first_name, fixed('sam', ignore_case=TRUE)) )
df
# like and ILIKE
# like is case sensitive, ILIKE is not case sensitive
# and sql requests using % wildcard need to be escaped using %%
df <- select(teachers,'first_name') %>% filter( str_detect(first_name, regex('sam', ignore_case=TRUE) ) )
df
df <- select(teachers,'first_name') %>% filter( str_detect(first_name, 'Sam' ) )
df
df <- select(teachers,'first_name') %>% filter( str_detect(first_name, regex('sam', ignore_case=TRUE) ) )
df
df <- select(teachers,'school') %>% filter( str_detect(first_name, regex('roo.', ignore_case=TRUE) ) )
df <- select(teachers,'school') %>% filter( str_detect(school, regex('roo.', ignore_case=TRUE) ) )
df
# And or
# last name cole or bush
df <- select(teachers,'last_name','first_name','salary') %>% filter( (last_name == "Cole") | (last_name == "Bush") )
df
# school is Myers, salary less than 40000
df <- select(teachers,'last_name','first_name','school','salary') %>% filter( school == "F.D. Roosevelt HS" & (salary < 38000 | salary > 40000)  )
df
# school is Roo, salary is < 38999 or > 40000
df <- select(teachers,'last_name','first_name','school','salary') %>% filter( str_detect(school, regex('roo.', ignore_case=TRUE) ) & (salary < 38000 | salary > 40000)  )
df
# select first, last school hire salary, school roo sort desc salary
df <- select(teachers,'last_name','first_name','school','hire_date','salary') %>% filter( str_detect(school, regex('roo.', ignore_case=TRUE) ) ) %>% arrange(desc(hire_date))
df
setwd("~/anaconda3/envs/pracSQL/Chapter_02_slicing")
library("RPostgreSQL")
library("tidyverse")
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")#, password = pw)
#test to see if connection works, and teachers table is there
dbExistsTable(con, "teachers")
# Basic syntax for running sql requests
teachers <- dbGetQuery(con, "SELECT * from teachers")
summary(teachers)
