dbGetQuery(con, sql)
# ltrim and rtrim
sql <- "SELECT ltrim('socks','s');"
dbGetQuery(con, sql)
# in R
?str_remove
str_remove('socks','s')
str_remove('socks','^s') # ^ beginning of a word
str_remove('socks','s$') # $ end of a word
# extracting characters
sql <- "SELECT left('708-555-1212',3);"
dbGetQuery(con, sql)
sql <- "SELECT right('708-555-1212',8);"
dbGetQuery(con, sql)
# in r
str_sub('708-555-1212',1,3)
str_sub('708-555-1212',-8)
# replace items in a string
sql <- "SELECT replace('bat','b','c');"
dbGetQuery(con, sql)
# In R
str_replace("bat","b","c")
# Any character one or more times
sql <- "SELECT substring('The game starts at 7 p.m. on May 2, 2019.' from '.+');"
dbGetQuery(con, sql)
# in R
str_match('The game starts at 7 p.m. on May 2, 2019.','.+')
# One or two digits followed by a space and p.m.
# Note that we need to escape an \ for this to work
sql <- "SELECT substring('The game starts at 7 p.m. on May 2, 2019.' from '\\d{1,2} (?:a.m.|p.m.)');"
dbGetQuery(con, sql)
str_match('The game starts at 7 p.m. on May 2, 2019.','\\d{1,2} (?:a.m.|p.m.)')
# One or more word characters at the start
sql <- "SELECT substring('The game starts at 7 p.m. on May 2, 2019.' from '^\\w+');"
dbGetQuery(con, sql)
str_match('The game starts at 7 p.m. on May 2, 2019.' , '^\\w+')
# One or more word characters followed by any character at the end.
sql <- "SELECT substring('The game starts at 7 p.m. on May 2, 2019.' from '\\w+.$');"
dbGetQuery(con, sql)
str_match('The game starts at 7 p.m. on May 2, 2019.' , '\\w+.$')
# The words May or June
sql <- "SELECT substring('The game starts at 7 p.m. on May 2, 2019.' from 'May|June');"
dbGetQuery(con, sql)
str_match('The game starts at 7 p.m. on May 2, 2019.' , 'May|June')
# The words May or June
sql <- "SELECT substring('The game starts at 7 p.m. on May or June 2, 2019.' from 'May|June');"
dbGetQuery(con, sql)
str_match('The game starts at 7 p.m. on May or June 2, 2019.' , 'May|June')
# May followed by a space, digit, comma, space, and four digits.
sql <- "SELECT substring('The game starts at 7 p.m. on May 2, 2019.' from 'May \\d, \\d{4}');"
dbGetQuery(con, sql)
str_match('The game starts at 7 p.m. on May 2, 2019.' , 'May \\d, \\d{4}')
# use regexp_match to grab the first dates
# remember we need to escape \
sql <- "SELECT crime_id,
regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}')
FROM crime_reports;"
dbGetQuery(con, sql)
# can I do this with pure R?
# As far as I can tell, I need to turn this into a vector
sql <- "SELECT original_text FROM crime_reports;"
df <- dbGetQuery(con, sql)
View(df)
# turn the data into a vector
dfv <- df %>% pull(original_text)
# and this works without any errors
?data.frame
ext <- data.frame( str_extract(dfv , '\\d{1,2}\\/\\d{1,2}\\/\\d{2}') )
colnames(ext) <- c("dates")
str_extract(dfv[1] , '\\d{1,2}\\/\\d{1,2}\\/\\d{2}')
View(ext)
# to grab all dates wih regexp_matches
# remember we need to escape \
sql <- "SELECT crime_id,
regexp_matches(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}', 'g')
FROM crime_reports;"
dbGetQuery(con, sql)
# in R
ext <- data.frame( str_extract_all(dfv, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}') )
sql <- "SELECT crime_id,
regexp_match(original_text, '-(\\d{1,2}\\/\\d{1,2}\\/\\d{2})')
FROM crime_reports;"
dbGetQuery(con, sql)
# get first hour or second hour. Note what's in () gets returned
sql <- "SELECT crime_id,
regexp_match(original_text, '\\d{2}\\n\\d{4}-(\\d{4})')
FROM crime_reports;"
dbGetQuery(con, sql)
# get street only
# \d+ matches any digit appearing one or more times
# space, then .+ is any character appearing one or more times
# until the (?:) which looks for what should be the end
sql <- "SELECT crime_id,
regexp_match(original_text, 'hrs.\\n(\\d+ .+(?:Sq.|Plz.|Dr.|Ter.|Rd.))')
FROM crime_reports;"
dbGetQuery(con, sql)
df <- dbGetQuery(con, sql)
View(df)
# let's put it all together in a dataframe
sql <- "SELECT
regexp_match(original_text, '(?:C0|SO)[0-9]+') AS case_number,
regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}') AS date_1,
regexp_match(original_text, '\\n(?:\\w+ \\w+|\\w+|\\w+)\\n(.*):') AS crime_type,
regexp_match(original_text, '(?:Sq.|Plz.|Dr.|Ter.|Rd.)\\n(\\w+ \\w+|\\w+|\\w+)\n') AS city
FROM crime_reports;"
df <- dbGetQuery(con, sql)
View(df)
# grab it out of the {}
sql <- "SELECT crime_id,
(regexp_match(original_text, '(?:C0|SO)[0-9]+'))[1] AS case_number
FROM crime_reports;"
dbGetQuery(con, sql)
sql <- "SELECT
(regexp_match(original_text, '(?:C0|SO)[0-9]+'))[1] AS case_number,
(regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}'))[1] AS date_1,
(regexp_match(original_text, '(?:Sq.|Plz.|Dr.|Ter.|Rd.)\\n(\\w+ \\w+|\\w+|\\w+)\n'))[1] AS city,
(regexp_match(original_text, '\\n(?:\\w+ \\w+|\\w+|\\w+)\\n(.*):'))[1] AS crime_type,
(regexp_match(original_text, ':\\s(.+)(?:C0|SO)'))[1] AS description
FROM crime_reports;"
df <- dbGetQuery(con, sql)
View(df)
# let's see what it looks like when we save it
write_csv(df,'test.csv', na = '')
# we know there are line breaks in the description field, so we can fix that in R
df$description <- str_replace(df$description,"\n"," ")
# let's see if that worked
write_csv(df,'test2.csv', na = '')
df <- dbGetQuery(con, sql)
# almost. Is there a str_replace all?
# recreate the df, then
df$description <- str_replace_all(df$description,"\n"," ")
# let's see if that worked
write_csv(df,'test3.csv', na = '')
sql <- "SELECT * FROM crime_reports;"
dbGetQuery(con, sql)
# updating crime_reports table with extracted data
sql <- "UPDATE crime_reports SET date_1 = (
(regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}'))[1]
|| ' ' ||
(regexp_match(original_text, '\\/\\d{2}\\n(\\d{4})'))[1]
||' US/Eastern')::timestamptz;"
dbGetQuery(con, sql)
sql <- "SELECT crime_id, date_1, original_text FROM crime_reports;"
dfx <- dbGetQuery(con, sql)
View(dfx)
sql <- "UPDATE crime_reports
SET date_1 = ((regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}'))[1]
|| ' ' ||
(regexp_match(original_text, '\\/\\d{2}\\n(\\d{4})'))[1]
||' US/Eastern')::timestamptz,
date_2 =
CASE
WHEN (SELECT regexp_match(original_text, '-(\\d{1,2}\\/\\d{1,2}\\/\\d{1,2})') IS NULL)
AND (SELECT regexp_match(original_text, '\\/\\d{2}\\n\\d{4}-(\\d{4})') IS NOT NULL)
THEN
((regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}'))[1]
|| ' ' ||
(regexp_match(original_text, '\\/\\d{2}\\n\\d{4}-(\\d{4})'))[1]
||' US/Eastern')::timestamptz
WHEN (SELECT regexp_match(original_text, '-(\\d{1,2}\\/\\d{1,2}\\/\\d{1,2})') IS NOT NULL)
AND (SELECT regexp_match(original_text, '\\/\\d{2}\\n\\d{4}-(\\d{4})') IS NOT NULL)
THEN
((regexp_match(original_text, '-(\\d{1,2}\\/\\d{1,2}\\/\\d{1,2})'))[1]
|| ' ' ||
(regexp_match(original_text, '\\/\\d{2}\\n\\d{4}-(\\d{4})'))[1]
||' US/Eastern')::timestamptz
ELSE NULL
END,
street = (regexp_match(original_text, 'hrs.\\n(\\d+ .+(?:Sq.|Plz.|Dr.|Ter.|Rd.))'))[1],
city = (regexp_match(original_text,'(?:Sq.|Plz.|Dr.|Ter.|Rd.)\\n(\\w+ \\w+|\\w+|\\w+)\\n'))[1],
crime_type = (regexp_match(original_text, '\\n(?:\\w+ \\w+|\\w+|\\w+)\\n(.*):'))[1],
description = (regexp_match(original_text, ':\\s(.+)(?:C0|SO)'))[1],
case_number = (regexp_match(original_text, '(?:C0|SO)[0-9]+'))[1];"
dbGetQuery(con, sql)
sql <- "SELECT case_number, date_1, street, city, crime_type, description
FROM crime_reports;"
dfy <- dbGetQuery(con, sql)
View(dfy)
# let's test the results
sql <- "
SELECT date_1,street,city,crime_type FROM crime_reports;
"
dfcrime <- dbGetQuery(con, sql)
View(dfcrime)
# using regular expressions with WHERE
sql <- "SELECT
regexp_match(original_text, '(?:C0|SO)[0-9]+') AS case_number,
regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}') AS date_1,
regexp_match(original_text, '\\n(?:\\w+ \\w+|\\w+)\\n(.*):') AS crime_type,
regexp_match(original_text, '(?:Sq.|Plz.|Dr.|Ter.|Rd.)\\n(\\w+ \\w+|\\w+)\\n')
AS city
FROM crime_reports;"
dbGetQuery(con, sql)
# using regular expressions with WHERE
sql <- "SELECT
regexp_match(original_text, '(?:C0|SO)[0-9]+')[1] AS case_number,
regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}')[1] AS date_1,
regexp_match(original_text, '\\n(?:\\w+ \\w+|\\w+)\\n(.*):')[1] AS crime_type,
regexp_match(original_text, '(?:Sq.|Plz.|Dr.|Ter.|Rd.)\\n(\\w+ \\w+|\\w+)\\n')[1]
AS city
FROM crime_reports;"
dbGetQuery(con, sql)
# using regular expressions with WHERE
sql <- "SELECT
regexp_match(original_text, '(?:C0|SO)[0-9]+')[1] AS case_number,
regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}')[1] AS date_1,
regexp_match(original_text, '\\n(?:\\w+ \\w+|\\w+)\\n(.*):')[1] AS crime_type,
regexp_match(original_text, '(?:Sq.|Plz.|Dr.|Ter.|Rd.)\\n(\\w+ \\w+|\\w+)\\n')[1] AS city
FROM crime_reports;"
dbGetQuery(con, sql)
# using regular expressions with WHERE
sql <- "SELECT
regexp_match(original_text, '(?:C0|SO)[0-9]+') AS case_number,
regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}') AS date_1,
regexp_match(original_text, '\\n(?:\\w+ \\w+|\\w+)\\n(.*):') AS crime_type,
regexp_match(original_text, '(?:Sq.|Plz.|Dr.|Ter.|Rd.)\\n(\\w+ \\w+|\\w+)\\n') AS city
FROM crime_reports;"
dftest <- dbGetQuery(con, sql)
View(dftest)
# using regular expressions with WHERE
sql <- "SELECT
regexp_match(original_text, '(?:C0|SO)[0-9]+')[1] AS case_number,
regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}') AS date_1,
regexp_match(original_text, '\\n(?:\\w+ \\w+|\\w+)\\n(.*):') AS crime_type,
regexp_match(original_text, '(?:Sq.|Plz.|Dr.|Ter.|Rd.)\\n(\\w+ \\w+|\\w+)\\n') AS city
FROM crime_reports;"
dftest <- dbGetQuery(con, sql)
# using regular expressions with WHERE
sql <- "SELECT
regexp_match(original_text, '(?:C0|SO)[0-9]+')[0] AS case_number,
regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}') AS date_1,
regexp_match(original_text, '\\n(?:\\w+ \\w+|\\w+)\\n(.*):') AS crime_type,
regexp_match(original_text, '(?:Sq.|Plz.|Dr.|Ter.|Rd.)\\n(\\w+ \\w+|\\w+)\\n') AS city
FROM crime_reports;"
dftest <- dbGetQuery(con, sql)
sql <- "SELECT
(regexp_match(original_text, '(?:C0|SO)[0-9]+'))[1] AS case_number,
(regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}'))[1] AS date_1,
(regexp_match(original_text, '(?:Sq.|Plz.|Dr.|Ter.|Rd.)\\n(\\w+ \\w+|\\w+|\\w+)\n'))[1] AS city,
(regexp_match(original_text, '\\n(?:\\w+ \\w+|\\w+|\\w+)\\n(.*):'))[1] AS crime_type,
(regexp_match(original_text, ':\\s(.+)(?:C0|SO)'))[1] AS description
FROM crime_reports;"
df <- dbGetQuery(con, sql)
View(df)
# using regular expressions with WHERE
sql <- "SELECT geo_name
FROM us_counties_2010
WHERE geo_name ~* '(.+lade.+|.+lare.+)'
ORDER BY geo_name;
"
dbGetQuery(con, sql)
sql <- "SELECT geo_name
FROM us_counties_2010
WHERE geo_name ~* '.+ash.+' AND geo_name !~ 'Wash.+'
ORDER BY geo_name;;
"
dbGetQuery(con, sql)
sql <- "SELECT geo_name
FROM us_counties_2010
WHERE geo_name ~* '.+ash.+' AND geo_name ~ 'Wash.+'
ORDER BY geo_name;;
"
dbGetQuery(con, sql)
sql <- "SELECT geo_name
FROM us_counties_2010
WHERE geo_name ~* '.+ash.+' AND geo_name !~ 'Wash.+'
ORDER BY geo_name;;
"
dbGetQuery(con, sql)
sql <- "SELECT regexp_replace('05/12/2018', '\\d{4}', '2017');"
dbGetQuery(con, sql)
sql <- "SELECT regexp_split_to_table('Four,score,and,seven,years,ago', ',');"
dbGetQuery(con, sql)
sql <- "SELECT regexp_split_to_array('Phil Mike Tony Steve', ' ');"
dbGetQuery(con, sql)
df <- dbGetQuery(con, sql)
View(df)
df <- as.data.table(dbGetQuery(con, sql))
class(df)
df <- as.data.frame(dbGetQuery(con, sql))
View(df)
df <- as.data.frame.table(dbGetQuery(con, sql))
View(df)
df <- dbGetQuery(con, sql)
as.data.frame.table(df)
df <- dbGetQuery(con, sql)
as.data.frame.table(df)
View(df)
sql <- "SELECT regexp_split_to_array('Phil Mike Tony Steve', ' ')[1];"
df <- dbGetQuery(con, sql)
sql <- "SELECT regexp_split_to_array('Phil Mike Tony Steve', ' ');"
dbGetQuery(con, sql)
df[1]
df[0]
df
df <- dbGetQuery(con, sql)
df
df[1]
df[2]
as.data.frame.table(df)
# Find the length of an array
sql <- "SELECT array_length(regexp_split_to_array('Phil Mike Tony Steve', ' '), 1);"
dbGetQuery(con, sql)
sql <- "SELECT regexp_split_to_array('Phil Mike Tony Steve', ' ');"
df <- dbGetQuery(con, sql)
adply(df)
dd <- data.frame(t(df))
View(dd)
arr <- array(df, dim = c(1, 4) )
View(arr)
as.data.frame(arr)
df[1]
df[1][1]
df[1](1)
df(1)
dftry <- df %>% as.data.frame(df) %>% str_replace(df,"{","")
dftry <- data.frame(matrix(unlist(df), nrow=length(df), byrow=T))
View(dftry)
str_remove(df,'{')
class(df)
View(df)
str_remove(df$regexp_split_to_array,'{')
str_remove(df$regexp_split_to_array[1],'{')
# turn the data into a vector
dfv <- df %>% pull(regexp_split_to_array)
str_extract(dfv[1] , '\\w+')
str_extract(dfv[1] , '\\w+,')
str_extract(dfv[1] , '\\w+ \\w+ \\w+ \\w+')
str_extract(dfv[1] , '\\w+,\\w+,\\w+,\\w+')
dftry <- as.data.frame(str_extract(dfv[1] , '\\w+,\\w+,\\w+,\\w+') )
View(dftry)
class(dfv)
class(dfv[1])
sql <- "SELECT regexp_split_to_array('Phil Mike Tony Steve', ' ');"
dbGetQuery(con, sql)
df <- dbGetQuery(con, sql)
class(df)
class(df[1])
strsplit(df, ',')
strsplit(df[1], ',')
str_split(df[1], ',')
str_split(df[1], c('{',',','}'))
dfv <- as.data.frame( str_split(df[1], ',') )
View(dfv)
str_remove(df[1],'{')
str_remove_all(df[1],'{',"")
str_replace(df[1],'{',"")
df[1]
dfv <- str_split(df[1], ',')
View(dfv)
lapply(df, gsub, pattern='{', replacement='')
lapply(df, gsub, pattern='\{', replacement='')
sql <- "SELECT regexp_split_to_array('Phil Mike Tony Steve', ' ');"
df <- dbGetQuery(con, sql)
lapply(df, gsub, pattern='\{', replacement='')
lapply(dfv, gsub, pattern='{', replacement='')
lapply(dfv, gsub, pattern='{}', replacement='')
View(df)
dfv <- as.data.frame( str_split(df[1], ',') )
View(dfv)
sql <- "SELECT to_tsvector('I am walking across the sitting room to sit with you.');"
dbGetQuery(con, sql)
sql <- "SELECT regexp_split_to_array('Phil Mike Tony Steve', ' ');"
dbGetQuery(con, sql)
df <- dbGetQuery(con, sql)
gsub("\\{|\\}", "",df)
gsub("[{}]", "", df)
gsub("^\\{+(.+)\\}+$", '\\1', df)
# so let's see what that gives us
dftry <- gsub("\\{|\\}", "",df)
class(dftry)
# so let's see what that gives us
dftry <- as.data.frame( gsub("\\{|\\}", "",df) )
class(dftry)
View(dftry)
# so let's see what that gives us
dftry <- as.array( gsub("\\{|\\}", "",df) )
class(dftry)
dftry
dftry[1]
# so let's see what that gives us
dftry <- as.array( gsub("\\{|\\}", ",",df) )
unlist(strsplit(dftry, ","))
# so let's see what that gives us
dftry <- as.array( gsub("\\{|\\}", "",df) )
class(dftry)
unlist(strsplit(dftry, ","))
dftry <- as.data.frame( unlist(strsplit(dftry, ",")) )
View(dftry)
# loading the speeches table
# wonder what kind of full-text search I can do in R with this?
sql <- "
CREATE TABLE president_speeches (
sotu_id serial PRIMARY KEY,
president varchar(100) NOT NULL,
title varchar(250) NOT NULL,
speech_date date NOT NULL,
speech_text text NOT NULL,
search_speech_text tsvector
);
COPY president_speeches (president, title, speech_date, speech_text)
FROM '/Users/tbroderick/anaconda3/envs/pracSQL/Chapter_13_text/sotu-1946-1977.csv'
WITH (FORMAT CSV, DELIMITER '|', HEADER OFF, QUOTE '@');
"
dbGetQuery(con, sql)
sql <- "SELECT * FROM president_speeches;"
speeches <- dbGetQuery(con, sql)
sql <- "SELECT * FROM president_speeches;"
speeches <- dbGetQuery(con, sql)
View(speeches)
sql <- "SELECT president, speech_date
FROM president_speeches
WHERE search_speech_text @@ to_tsquery('Vietnam')
ORDER BY speech_date;"
dbGetQuery(con, sql)
sql <- "
SELECT president,
speech_date,
ts_headline(speech_text, to_tsquery('Vietnam'),
'StartSel = <,
StopSel = >,
MinWords=5,
MaxWords=7,
MaxFragments=1')
FROM president_speeches
WHERE search_speech_text @@ to_tsquery('Vietnam');
"
dbGetQuery(con, sql)
# using multiple words (not roads)
sql <- "
SELECT president,
speech_date,
ts_headline(speech_text, to_tsquery('transportation & !roads'),
'StartSel = <,
StopSel = >,
MinWords=5,
MaxWords=7,
MaxFragments=1')
FROM president_speeches
WHERE search_speech_text @@ to_tsquery('transportation & !roads');
"
dbGetQuery(con, sql)
# <-> finds adjacent words, in this case 'defense' immediatly following 'military'
sql <- "
SELECT president,
speech_date,
ts_headline(speech_text, to_tsquery('military <-> defense'),
'StartSel = <,
StopSel = >,
MinWords=5,
MaxWords=7,
MaxFragments=1')
FROM president_speeches
WHERE search_speech_text @@ to_tsquery('military <-> defense');
"
dbGetQuery(con, sql)
# change <-> to <2> gets you defense exactly two words away from military
# such as military and defense
sql <- "
SELECT president,
speech_date,
ts_headline(speech_text, to_tsquery('military <2> defense'),
'StartSel = <,
StopSel = >,
MinWords=5,
MaxWords=7,
MaxFragments=1')
FROM president_speeches
WHERE search_speech_text @@ to_tsquery('military <2> defense');
"
dbGetQuery(con, sql)
sql <- "
SELECT president,
speech_date,
ts_rank(search_speech_text,
to_tsquery('war & security & threat & enemy')) AS score
FROM president_speeches
WHERE search_speech_text @@ to_tsquery('war & security & threat & enemy')
ORDER BY score DESC
LIMIT 5;"
dbGetQuery(con, sql)
sql <- "SELECT president, speech_date
FROM president_speeches
WHERE search_speech_text @@ to_tsquery('Vietnam')
ORDER BY speech_date;"
dbGetQuery(con, sql)
sql <- "SELECT char_length(speech_text) FRom president_speeches;"
dbGetQuery(con, sql)
sql <- "SELECT president,
speech_date,
char_length(speech_text) FROM president_speeches;"
dbGetQuery(con, sql)
sql <- "SELECT president,
speech_date,
char_length(speech_text) FROM president_speeches
ORDER BY char_length DESC;"
dbGetQuery(con, sql)
sql <- "
SELECT president,
speech_date,
ts_rank(search_speech_text,
to_tsquery('war & security & threat & enemy'), 2)::numeric
AS score
FROM president_speeches
WHERE search_speech_text @@ to_tsquery('war & security & threat & enemy')
ORDER BY score DESC
LIMIT 5;
"
dbGetQuery(con, sql)
# disconnect
dbDisconnect(con)
dbUnloadDriver(drv)
