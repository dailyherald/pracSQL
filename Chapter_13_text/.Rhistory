# set directory
setwd("~/anaconda3/envs/pracSQL/Chapter_11/")
# load libraries
library(tidyverse)
library("RPostgreSQL")
options("scipen" = 10)
# connect to postgres (remembert to turn it on)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")
# Extracting components of a timestamp value using date_part()
sql <- "SELECT
date_part('year', '2019-12-01 18:37:12 EST'::timestamptz) AS \"year\",
date_part('month', '2019-12-01 18:37:12 EST'::timestamptz) AS \"month\",
date_part('day', '2019-12-01 18:37:12 EST'::timestamptz) AS \"day\",
date_part('hour', '2019-12-01 18:37:12 EST'::timestamptz) AS \"hour\",
date_part('minute', '2019-12-01 18:37:12 EST'::timestamptz) AS \"minute\",
date_part('seconds', '2019-12-01 18:37:12 EST'::timestamptz) AS \"seconds\",
date_part('timezone_hour', '2019-12-01 18:37:12 EST'::timestamptz) AS \"tz\",
date_part('week', '2019-12-01 18:37:12 EST'::timestamptz) AS \"week\",
date_part('quarter', '2019-12-01 18:37:12 EST'::timestamptz) AS \"quarter\",
date_part('epoch', '2019-12-01 18:37:12 EST'::timestamptz) AS \"epoch\";"
dbGetQuery(con, sql)
dbGetQuery(con, sql)
sql <- "SHOW timezone;"
dbGetQuery(con, sql)
sql <- "SET timezone TO 'US/Pacific';"
dbGetQuery(con, sql)
sql <- "SHOW timezone;"
dbGetQuery(con, sql)
sql <- "CREATE TABLE time_zone_test (
test_date timestamp with time zone
);
INSERT INTO time_zone_test VALUES ('2020-01-01 4:00');"
dbGetQuery(con, sql)
sql <- "SELECT test_date
FROM time_zone_test;"
dbGetQuery(con, sql)
sql <- "SET timezone TO 'US/Eastern';"
dbGetQuery(con, sql)
sql <- "SELECT test_date FROM time_zone_test;"
dbGetQuery(con, sql)
sql <- "SET timezone TO 'US/Pacific';"
dbGetQuery(con, sql)
sql <- "SHOW timezone;"
dbGetQuery(con, sql)
sql <- "CREATE TABLE time_zone_test (test_date timestamp with time zone);
INSERT INTO time_zone_test VALUES ('2020-01-01 4:00');"
dbGetQuery(con, sql)
sql <- "SELECT test_date FROM time_zone_test;"
dbGetQuery(con, sql)
sql <- "SET timezone TO 'US/Eastern';"
dbGetQuery(con, sql)
sql <- "SHOW timezone;"
dbGetQuery(con, sql)
sql <- "SET timezone TO 'US/Central';"
dbGetQuery(con, sql)
sql <- "SHOW timezone;"
dbGetQuery(con, sql)
# create a test table
sql <- "CREATE TABLE time_zone_test (test_date timestamp with time zone);
INSERT INTO time_zone_test VALUES ('2020-01-01 4:00');"
dbGetQuery(con, sql)
sql <- "SELECT test_date FROM time_zone_test;"
dbGetQuery(con, sql)
sql <- "SET timezone TO 'US/Pacific';"
dbGetQuery(con, sql)
sql <- "SHOW timezone;"
dbGetQuery(con, sql)
sql <- "SELECT test_date FROM time_zone_test;"
dbGetQuery(con, sql)
sql <- "SET timezone TO 'US/Eastern';"
dbGetQuery(con, sql)
sql <- "SHOW timezone;"
dbGetQuery(con, sql)
sql <- "SELECT test_date FROM time_zone_test;"
dbGetQuery(con, sql)
sql <- "SELECT test_date AT TIME ZONE 'Asia/Seoul'
FROM time_zone_test;"
dbGetQuery(con, sql)
# make sure timezone is US/Central
sql <- "SET timezone TO 'US/Central';"
dbGetQuery(con, sql)
sql <- "SHOW timezone;"
dbGetQuery(con, sql)
# get a date from the test table
sql <- "SELECT test_date FROM time_zone_test;"
dbGetQuery(con, sql)
# set a new timezone
sql <- "SET timezone TO 'US/Pacific';"
dbGetQuery(con, sql)
sql <- "SHOW timezone;"
dbGetQuery(con, sql)
# get a date from the test table
sql <- "SELECT test_date FROM time_zone_test;"
dbGetQuery(con, sql)
# we get the same date and time
# here's how to get date time according to different timezones
sql <- "SELECT test_date AT TIME ZONE 'Asia/Seoul'
FROM time_zone_test;"
dbGetQuery(con, sql)
# make sure timezone is US/Central
sql <- "SET timezone TO 'US/Central';"
dbGetQuery(con, sql)
sql <- "SHOW timezone;"
dbGetQuery(con, sql)
# math with dates
sql <- "SELECT '9/30/1929'::date - '9/27/1929'::date;"
dbGetQuery(con, sql)
sql <- "SELECT '9/30/1929'::date + '5 years'::interval;"
dbGetQuery(con, sql)
# set directory
setwd("~/anaconda3/envs/pracSQL/Chapter_11/")
# load libraries
library(tidyverse)
library("RPostgreSQL")
options("scipen" = 10)
# connect to postgres (remembert to turn it on)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")
# Extracting components of a timestamp value using date_part()
sql <- "SELECT
date_part('year', '2019-12-01 18:37:12 EST'::timestamptz) AS \"year\",
date_part('month', '2019-12-01 18:37:12 EST'::timestamptz) AS \"month\",
date_part('day', '2019-12-01 18:37:12 EST'::timestamptz) AS \"day\",
date_part('hour', '2019-12-01 18:37:12 EST'::timestamptz) AS \"hour\",
date_part('minute', '2019-12-01 18:37:12 EST'::timestamptz) AS \"minute\",
date_part('seconds', '2019-12-01 18:37:12 EST'::timestamptz) AS \"seconds\",
date_part('timezone_hour', '2019-12-01 18:37:12 EST'::timestamptz) AS \"tz\",
date_part('week', '2019-12-01 18:37:12 EST'::timestamptz) AS \"week\",
date_part('quarter', '2019-12-01 18:37:12 EST'::timestamptz) AS \"quarter\",
date_part('epoch', '2019-12-01 18:37:12 EST'::timestamptz) AS \"epoch\";"
dbGetQuery(con, sql)
# make a date
sql <- "SELECT make_date(2018, 2, 22);"
dbGetQuery(con, sql)
# make a time
sql <- "SELECT make_time(18, 4, 30.3);"
dbGetQuery(con, sql)
# make a timestamp with time zone
sql <- "SELECT make_timestamptz(2018, 2, 22, 18, 4, 30.3, 'Europe/Lisbon');"
dbGetQuery(con, sql)
# get current time info
sql <- "SELECT current_date;"
dbGetQuery(con, sql)
sql <- "SELECT current_time;"
dbGetQuery(con, sql)
sql <- "SELECT current_timestamp;"
dbGetQuery(con, sql)
sql <- "SELECT localtime;"
dbGetQuery(con, sql)
sql <- "SELECT localtimestamp;"
dbGetQuery(con, sql)
sql <- "SELECT now();"
dbGetQuery(con, sql)
# exctract year from now
sql <- "SELECT date_part('year', now()) AS \"year\";"
dbGetQuery(con, sql)
# compare
sql <- "(SELECT current_timestamp,
clock_timestamp()
FROM generate_series(1,1000));"
df <- dbGetQuery(con, sql)
sql <- "SELECT * FROM current_time_example;"
df2 <- dbGetQuery(con, sql)
View(df)
View(df2)
# get postgressql defaults
sql <- "SHOW ALL;"
show <- dbGetQuery(con, sql)
View(show)
sql <- "SHOW timezone;"
dbGetQuery(con, sql)
sql <- "SELECT * FROM pg_timezone_abbrevs;"
dbGetQuery(con, sql)
# ooh, gets UTC offsets too
sql <- "SELECT * FROM pg_timezone_names;"
dbGetQuery(con, sql)
# Filter to find one
sql <- "SELECT * FROM pg_timezone_names
WHERE name LIKE 'Europe%';"
dbGetQuery(con, sql)
# create a test table
sql <- "CREATE TABLE time_zone_test (test_date timestamp with time zone);
INSERT INTO time_zone_test VALUES ('2020-01-01 4:00');"
# Filter to find one
sql <- "SELECT * FROM pg_timezone_names
WHERE name LIKE 'Europe%';"
# make sure timezone is US/Central
sql <- "SET timezone TO 'US/Central';"
dbGetQuery(con, sql)
sql <- "SHOW timezone;"
dbGetQuery(con, sql)
# get a date from the test table
sql <- "SELECT test_date FROM time_zone_test;"
dbGetQuery(con, sql)
# set a new timezone
sql <- "SET timezone TO 'US/Pacific';"
dbGetQuery(con, sql)
sql <- "SHOW timezone;"
dbGetQuery(con, sql)
# get a date from the test table
sql <- "SELECT test_date FROM time_zone_test;"
dbGetQuery(con, sql)
# we get the same date and time
# here's how to get date time according to different timezones
sql <- "SELECT test_date AT TIME ZONE 'Asia/Seoul'
FROM time_zone_test;"
dbGetQuery(con, sql)
# make sure timezone is US/Central
sql <- "SET timezone TO 'US/Central';"
dbGetQuery(con, sql)
sql <- "SHOW timezone;"
dbGetQuery(con, sql)
# math with dates
sql <- "SELECT '9/30/1929'::date - '9/27/1929'::date;"
dbGetQuery(con, sql)
sql <- "SELECT '9/30/1929'::date + '5 years'::interval;"
dbGetQuery(con, sql)
version
library(rJava)
# load libraries
library(tidyverse)
install.packages("tidyverse")
# load libraries
library(tidyverse)
install.packages("readxl")
install.packages("readxl")
install.packages("RPostgreSQL")
library("RPostgreSQL")
options("scipen" = 10)
# connect to postgres (remembert to turn it on)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "mhmetrics",
host = "localhost", port = 5432,
user = "tbroderick")
# execute query
sql <- "SELECT count(*) FROM hospitals;"
dbGetQuery(con, sql)
con <- dbConnect(drv, dbname = "mhmetrics",
host = "localhost", port = 5432,
user = "tbroderick")
con <- dbConnect(drv, dbname = "mhmetrics",
host = "localhost", port = 5432,
user = "tbroderick")
# execute query
sql <- "SELECT count(*) FROM hospitals;"
dbGetQuery(con, sql)
install.packages("tabulizer")
library(tabulizer)
install.packages("tabulizerjars")
library(tabulizer)
install.packages("rJava")
library(tabulizer)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("tabulizer", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("tabulizerjars", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
# set directory
setwd("~/anaconda3/envs/notebook/MHMetrics/behavioral")
# load libraries
library(tidyverse)
#library('readxl')
library("RPostgreSQL")
options("scipen" = 10)
# connect to postgres (remembert to turn it on)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "mhmetrics",
host = "localhost", port = 5432,
user = "tbroderick")
# execute query
sql <- "SELECT count(*)
FROM hospitals LEFT JOIN descrip ON hospitals.cms_id = descrip.cms_id
WHERE descrip.fyear = finance.fyear AND (descrip.fydays = '365' OR descrip.fydays = '366')
AND hospitals.what != 'closed' AND hospitals.active != 'no' AND descrip.prov_type = 'Psychiatric Hospitals'
;"
number <- dbGetQuery(con, sql)
# execute query
sql <- "SELECT count(*)
FROM hospitals LEFT JOIN descrip ON hospitals.cms_id = descrip.cms_id
WHERE (descrip.fydays = '365' OR descrip.fydays = '366') AND hospitals.what != 'closed'
AND hospitals.active != 'no' AND descrip.prov_type = 'Psychiatric Hospitals'
;"
number <- dbGetQuery(con, sql)
View(number)
# execute query
sql <- "SELECT hospitals.cms_id, descrip.fyear
FROM hospitals LEFT JOIN descrip ON hospitals.cms_id = descrip.cms_id
WHERE (descrip.fydays = '365' OR descrip.fydays = '366') AND hospitals.what != 'closed'
AND hospitals.active != 'no' AND descrip.prov_type = 'Psychiatric Hospitals'
;"
number <- dbGetQuery(con, sql)
View(number)
dfcount <- number %>%
group_by(fyear) %>%
summarise(reports = n())
View(dfcount)
install.packages('odbc')
?odbc
install.pacages('DBI')
install.packages('DBI')
library('odbc')
sort(unique(odbcListDrivers()))
sort(unique(odbcListDrivers()[[1]]))
#install.packages('RODBC')
library(RODBC)
odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=mdb/hospital.mdb")
# set directory
setwd("~/anaconda3/envs/pracSQL/Chapter_13_text")
# load libraries
library(tidyverse)
#library('readxl')
library("RPostgreSQL")
options("scipen" = 10)
# connect to postgres (remembert to turn it on)
drv <- dbDriver("PostgreSQL")
# connect to aranalysis (for pracSQL)
con <- dbConnect(drv, dbname = "aranalysis",
host = "localhost", port = 5432,
user = "tbroderick")
sql <- "CREATE TABLE crime_reports (
crime_id bigserial PRIMARY KEY,
date_1 timestamp with time zone,
date_2 timestamp with time zone,
street varchar(250),
city varchar(100),
crime_type varchar(100),
description text,
case_number varchar(50),
original_text text NOT NULL
);"
dbGetQuery(con, sql)
sql <- "COPY crime_reports (original_text)
FROM '/Users/tbroderick/anaconda3/envs/pracSQL/Chapter_13_text/crime_reports.csv'
WITH (FORMAT CSV, HEADER OFF, QUOTE '\"');"
dbGetQuery(con, sql)
df <- dbGetQuery(con, sql)
sql <- "SELECT original_text FROM crime_reports;"
df <- dbGetQuery(con, sql)
View(df)
View(df)
# use regexp_match to grab the dates
# remember we need to escape \
sql <- "SELECT crime_id,
regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}')
FROM crime_reports;"
dbGetQuery(con, sql)
dfdates <- dbGetQuery(con, sql)
View(dfdates)
# in r
str_match(df , "original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}'")
# in r
str_match(df , '\\d{1,2}\\/\\d{1,2}\\/\\d{2}')
# in r
str_match(df[0] , '\\d{1,2}\\/\\d{1,2}\\/\\d{2}')
# in r
str_match(df[1] , '\\d{1,2}\\/\\d{1,2}\\/\\d{2}')
# in r
str_match(df[1],'\\d{1,2}\\/\\d{1,2}\\/\\d{2}')
